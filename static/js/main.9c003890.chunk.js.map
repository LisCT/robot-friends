{"version":3,"sources":["reducers.js","serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/Header.js","containers/App.js","actions.js","constants.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","Card","_ref","id","name","email","react_default","a","createElement","className","src","concat","alt","CardList","map","robot","i","components_Card","key","SearchBox","onSearchChange","type","aria-label","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","hasErrors","info","this","setState","Component","Header","nextProps","nextState","App","onRequestRobots","_this$props","filterRobots","filter","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","response","json","data","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","Object","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9c003890.chunk.js","sourcesContent":["import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED \n} from './constants';\n\nconst initialStateSearch = {\n\n    searchField: ''\n\n}\n\nexport const searchRobots  = (state = initialStateSearch, action = {}) => {\n\n    switch(action.type) {\n\n        case CHANGE_SEARCH_FIELD:\n            return { ...state, searchField: action.payload }\n\n        default:\n            return state\n\n    }\n\n} \n\n\nconst initialStateRobots = {\n\n    isPending: false,\n    robots: [],\n    error: ''\n\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n\n    switch(action.type) {\n\n        case REQUEST_ROBOTS_PENDING:\n            return { ...state, \n                    isPending: true \n                }\n\n        case REQUEST_ROBOTS_SUCCESS:\n            return { ...state, \n                    robots: action.payload, \n                    isPending: false  \n                }\n\n        case REQUEST_ROBOTS_FAILED:\n            return { ...state, \n                    error: action.payload, \n                    isPending: false \n                }   \n\n        default:\n            return state\n\n    }\n\n} ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Card = ({id, name, email}) => (\n\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow\">\n        <img src={`https://robohash.org/${id}?size=200x200`}alt=\"robot\"/>\n        <div>\n            <h2>{name}</h2>\n            <p>{email}</p>\n        </div>\n    </div>\n    \n);\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => (\n    <div>\n        {robots.map((robot, i) => ( \n            <Card \n                key = {robots[i].id}\n                id = {robots[i].id}\n                name = {robots[i].name}\n                email = {robots[i].email}\n            /> \n        ))}\n    </div>\n);\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ onSearchChange }) => (\n\n    <div className=\"pa2\">\n        <input \n            className=\"pa3 ba b--green bg-lightest-blue\"\n            type=\"text\" \n            aria-label=\"Search Robots\"\n            placeholder=\"search robots\"\n            onChange={onSearchChange}\n        />\n    </div>\n    \n);\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => (\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px' }}>\n\n        {props.children}\n    \n    </div>\n);\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n\n    state = {\n\n        hasErrors: false\n\n    }\n\n    componentDidCatch( error, info){\n        \n        this.setState({ hasErrors: true });\n\n    }\n\n    render(){\n\n        if(this.state.hasErrors){\n\n            return <h1>Ooops. That is not good</h1>\n        }\n\n        return this.props.children\n\n    }\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\n\nclass Header extends Component{\n\n    shouldComponentUpdate(nextProps, nextState){\n        return false;\n    }\n\n    render(){\n        return(\n    \n        <div>\n            <h1>RoboFriends</h1>\n        </div>\n\n        )\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Cardlist from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\nimport Header from '../components/Header';\n\n\nimport { setSearchField, requestRobots } from  '../actions';\n\n// what piece of state I need\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error,\n    }\n}\n\n// what props I need to dispatch\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component{\n\n    componentDidMount(){\n\n        this.props.onRequestRobots()\n\n    }\n\n    render(){\n\n        const { robots, isPending, searchField, onSearchChange } = this.props;\n\n        const filterRobots = robots.filter( robot => (\n            robot.name.toLowerCase()\n            .includes(searchField.toLowerCase())\n        ));\n\n       return isPending ?\n       \n            <h1 className=\"tc\">Loading...</h1> :\n\n        (\n            <div className=\"tc\">\n                <Header/>\n                <SearchBox onSearchChange={onSearchChange}/>\n                <Scroll>\n                    <ErrorBoundry>\n                        <Cardlist robots={filterRobots}/>\n                    </ErrorBoundry>\n                </Scroll>\n            </div>\n        )\n            \n        \n    };\n\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField  = (text) => ({\n\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n\n})\n\n// because we are returning a function we can identify that its a middleware that need a dispatch. If its a obj its going to avoid the middleware.\nexport const requestRobots = () => (dispatch) => {\n\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then( response => response.json())\n        .then( data => dispatch({ \n            type:REQUEST_ROBOTS_SUCCESS,\n            payload: data \n        }))\n        .catch(error => dispatch({\n            type: REQUEST_ROBOTS_FAILED,\n            payload: error\n        }))\n\n}\n\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { searchRobots, requestRobots } from './reducers';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'tachyons';\nimport App from './containers/App';\nimport './index.css';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n                    <Provider store={store}>  \n                        <App /> \n                    </Provider>, \n                    document.getElementById('root')\n                );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}